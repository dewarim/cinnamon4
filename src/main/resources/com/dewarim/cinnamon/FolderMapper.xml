<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dewarim.cinnamon.model.Folder">

    <resultMap id="folderMap" type="com.dewarim.cinnamon.model.Folder">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="objVersion" column="obj_version"/>
        <result property="aclId" column="acl_id"/>
        <result property="ownerId" column="owner_id"/>
        <result property="parentId" column="parent_id"/>
        <result property="typeId" column="type_id"/>
        <result property="metadataChanged" column="metadata_changed"/>
        <result property="created" column="created"/>
        <result property="summary" column="summary"/>
    </resultMap>

    <select id="getFoldersById" parameterType="map" resultMap="folderMap">
        SELECT
        id,
        name,
        obj_version,
        acl_id,
        owner_id,
        parent_id,
        type_id,
        metadata_changed,
        created,
        CASE WHEN #{includeSummary} THEN summary ELSE null END AS summary

        FROM folders
        WHERE id IN
        <foreach item="item" index="index" collection="idList"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getFolderByParentAndName" parameterType="map" resultMap="folderMap">
        SELECT id,
               name,
               obj_version,
               acl_id,
               owner_id,
               parent_id,
               type_id,
               metadata_changed,
               created,
               CASE WHEN #{includeSummary} THEN summary ELSE null END AS summary
        FROM folders
        WHERE parent_id = #{parentId}
          AND name = #{name}
    </select>

    <select id="getFolderByIdWithAncestors" parameterType="map" resultMap="folderMap">
        SELECT id,
               name,
               obj_version,
               acl_id,
               owner_id,
               parent_id,
               type_id,
               metadata_changed,
               created,
               CASE
                   WHEN #{includeSummary}
                       THEN summary
                   ELSE null END AS summary

        FROM folders
        WHERE id in (
            with recursive fp (id, parent_id, name, ids)
                               as (
                    select id,
                           parent_id,
                           name,
                           array [id]
                    from folders f
                    where f.parent_id is null
                    union all
                    select child.id,
                           child.parent_id,
                           child.name,
                           array_append(ids, child.id)
                    from folders child
                             join fp on child.parent_id = fp.id
                    where child.parent_id is not null
                )
            select id
            from fp
            where array_length(ids, 1) &lt;= (select array_length(ids, 1)
                                              from fp
                                              where id = #{id})
              and ids &lt;@ (select ids
                             from fp
                             where id = #{id})
        )
    </select>

    <select id="getRootFolder" parameterType="map" resultMap="folderMap">
        SELECT id,
               name,
               obj_version,
               acl_id,
               owner_id,
               parent_id,
               type_id,
               metadata_changed,
               created,
               CASE
                   WHEN #{includeSummary}
                       THEN summary
                   ELSE null END AS summary

        FROM folders
        WHERE name = #{rootFolderName}
          AND parent_id is NULL
    </select>

    <select id="getFolderByParentIdAndChildName" parameterType="map" resultMap="folderMap">
        SELECT id,
               name,
               obj_version,
               acl_id,
               owner_id,
               parent_id,
               type_id,
               metadata_changed,
               created,
               CASE
                   WHEN #{includeSummary}
                       THEN summary
                   ELSE null END AS summary

        FROM folders
        WHERE name = #{childName}
          AND parent_id = #{parentId}
    </select>

    <select id="getDirectSubFolders" parameterType="map" resultMap="folderMap">
        SELECT id,
               name,
               obj_version,
               acl_id,
               owner_id,
               parent_id,
               type_id,
               metadata_changed,
               created,
               CASE
                   WHEN #{includeSummary}
                       THEN summary
                   ELSE null END AS summary

        FROM folders
        WHERE parent_id = #{id}
    </select>

    <select id="getChildFolderOfRootByName" parameterType="map" resultMap="folderMap">
        SELECT id,
               name,
               obj_version,
               acl_id,
               owner_id,
               parent_id,
               type_id,
               metadata_changed,
               created,
               CASE
                   WHEN #{includeSummary}
                       THEN summary
                   ELSE null END AS summary

        FROM folders
        WHERE name = #{name}
          AND parent_id = #{id}
    </select>

    <!-- TODO: perhaps implement safe version (checking for folder.obj_version = old obj_version) -->
    <update id="updateFolder">
        UPDATE folders
        SET created          = #{created},
            name             = #{name},
            obj_version      = obj_version + 1,
            acl_id           = #{aclId},
            owner_id         = #{ownerId},
            parent_id        = #{parentId},
            type_id          = #{typeId},
            metadata_changed = #{metadataChanged},
            summary          = #{summary}
        WHERE id = #{id}
    </update>


    <insert id="insertFolder" parameterType="com.dewarim.cinnamon.model.Folder">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            select nextval('seq_folder_id')
        </selectKey>
        INSERT INTO folders
        (id, name, obj_version, acl_id, owner_id, parent_id, type_id, metadata_changed, summary, created)
        VALUES (#{id}, #{name},0,#{aclId},#{ownerId},#{parentId},#{typeId},#{metadataChanged},#{summary},#{created})
    </insert>

    <select id="countContent" parameterType="list" resultType="long">
        select count(id) from objects
        where
        <foreach item="item" index="index" collection="list" open="parent_id in (" separator="," close=")"
                 nullable="false">#{item}
        </foreach>
    </select>

    <select id="countSubfolders" parameterType="list" resultType="long">
        select count(f.id) from folders f
        where
            <foreach item="item" index="index" collection="list"
                     open="f.parent_id in (" separator="," close=")" nullable="false">#{item}
            </foreach>
    </select>

    <delete id="delete" parameterType="list">
        DELETE
        FROM folders
        WHERE id in
        <foreach item="item" index="index" collection="list"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>


    <select id="getAllById" parameterType="list" resultMap="folderMap">
        SELECT *
        FROM folders
        WHERE id in
        <foreach item="item" index="index" collection="list"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

</mapper>